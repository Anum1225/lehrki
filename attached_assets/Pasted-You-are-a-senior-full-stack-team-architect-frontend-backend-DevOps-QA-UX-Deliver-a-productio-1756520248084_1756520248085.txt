You are a senior full‑stack team (architect, frontend, backend, DevOps, QA, UX). Deliver a production‑ready, scalable SaaS platform based on the specification below. Code must be clean, secure, tested, multilingual, and documented, with CI/CD deployment scripts.

🎯 1) Vision & Goals

Build LehrKI.ch, a multilingual, subscription‑driven EdTech platform providing teachers, students, and admins with:

AI tools: Parent Letter Generator, Quiz Creator, and Assessment Center.

Persistent, multilingual chatbot available site‑wide.

Role‑based dashboards (Admin, Teacher, Student).

Stripe billing with monthly token system + usage history.

Community hub (forum + optional real‑time chat).

Full i18n (German, French, Italian, English) in UI and AI outputs.

The platform must be secure, modular, and extensible for future AI tools.

🛠 2) Tech Stack

Frontend: React.js (SPA, Vite or Next.js), React Router, React Query, Zustand/Context, TypeScript.

Styling: Tailwind CSS + Headless UI/Radix. Mobile‑first + WCAG accessible.

i18n: react-i18next with namespaces and persistent language selection.

Backend: FastAPI (Python 3.11+), PostgreSQL + SQLAlchemy 2.0, Alembic.

Auth: JWT (access+refresh), cookie‑based refresh, RBAC.

Payments: Stripe Checkout + Portal, Webhooks.

AI Layer: Pluggable provider interface (OpenAI, GLM, Claude, etc.), via FastAPI service or n8n.

Realtime: WebSockets (Redis) or Pusher/Ably for chat/forum live updates.

Deployment: Docker, Docker Compose, Hetzner (Caddy/Traefik, TLS). CI/CD with GitHub Actions.

Observability: Structured logs, Sentry, Prometheus.

Testing: Pytest (backend), Vitest + Playwright (frontend).

👥 3) Roles & Access

Admin: Manage users, subscriptions, moderation, analytics.

Teacher (Premium): Full AI tools, create quizzes, analytics, manage classes.

Student (Free): Take quizzes/assessments, limited tool access.

AI Tool Rules

Parent Letter → Premium only; multilingual; token deducted per generation.

Quiz Creator → Free = external link; Premium = full builder, storage, results.

Assessment Center → Free = limited; Premium = full automated feedback/history.

💬 4) Chatbot

Floating widget across site.

Role‑aware suggestions.

Multilingual output matching user’s preference.

Error‑resilient (fallbacks on downtime).

💳 5) Subscription & Tokens

Stripe plans, e.g., $10/month = 1,000 tokens.

AI tools deduct tokens after success.

Token ledger with usage history.

Alerts: 80% warning, 100% block + upgrade CTA.

🌍 6) Community Hub

Forum (threads, posts, replies, votes).

Optional real‑time chat channels (teacher/student).

Admin moderation.

📑 7) Pages & Dashboards

Public: Landing, Pricing, About, Login/Register, Language, Legal.

Admin: user mgmt, roles, plans, token usage, moderation.

Teacher: tools dashboard, token usage, classes, analytics.

Student: assigned quizzes, progress, announcements.

AI Tools: Letter Generator, Quiz Creator, Assessment Center.

Community: forum/chat.

Account: profile, billing portal, subscription, token ledger.

All pages: loading states, empty states, error handling, accessibility.

🗄 8) Database (Postgres)

Users, Roles, Subscriptions, Token Ledger, AI Jobs.

Parent Letters, Quizzes, Quiz Questions, Quiz Attempts.

Assessments, Forum Threads/Posts, Notifications.

Audit Logs (every mutation).

Models in SQLAlchemy 2.0 + Alembic migrations.

🔌 9) API (FastAPI, /api/v1)

Auth: register, login, refresh, logout, me.

Billing: plans, checkout, portal, Stripe webhooks.

Usage: ledger history.

AI Tools: parent‑letter, quiz build, assessment run.

Quizzes: CRUD + attempts.

Community: forum endpoints, WS for live updates.

Admin: users, plans, moderation, translations.

All responses JSON (Pydantic). Mutations logged.

🎨 10) Frontend UX

App Shell: topbar (lang switch, token meter, profile), sidebar nav.

Forms: React Hook Form + Zod validation.

Feature Gating: Premium‑only features hidden/disabled.

Parent Letters: form → preview → history → PDF export.

Quizzes: builder, question types (MCQ, T/F, short answer), results.

Assessments: run, instant feedback, history.

Community: forum UI (thread list, replies, search).

Chatbot Widget: floating, side drawer, typing indicator.

🔐 11) Security & Compliance

OWASP best practices.

Password hashing (Argon2).

Rate limiting (per IP + per user).

GDPR: consent banner, export/delete data endpoints.

HTTPS enforced.

📊 12) Analytics & SEO

SEO on public pages: meta tags, sitemap, robots.txt, localized metadata.

Product analytics (Plausible/PostHog) gated by consent.

⚙️ 13) DevOps & Deployment

Monorepo: /frontend, /backend, /infra.

Dockerized apps, Postgres, Redis, Caddy.

CI: lint, test, build, image push.

CD: deploy to Hetzner with rolling updates.

Backups: nightly DB backup.

🧪 14) Testing Strategy

Backend: Pytest, 85%+ coverage.

Frontend: Vitest + RTL; Playwright e2e (auth, billing, tools).

Load tests: k6 on key endpoints.

📂 15) Directory Structure
/apps
  /frontend
    /src (pages, components, features, api, i18n, styles)
  /backend
    /app (api, core, db, services, routers)
/infra (docker, configs)
🔑 16) Environment Variables

Backend: DB_URL, JWT_SECRET, STRIPE_KEYS, AI_KEYS, REDIS_URL, FRONTEND_ORIGIN.

Frontend: VITE_API_URL, VITE_STRIPE_KEY.

✅ 17) Acceptance Criteria

All features functional across desktop & mobile.

Stripe checkout → subscription active → tokens available.

AI tools deduct tokens & save outputs.

Chatbot multilingual + resilient.

Community functional with moderation.

i18n for DE/FR/IT/EN.

CI/CD working, Hetzner deployment successful.

📅 18) Milestones

Auth + i18n + CI/CD.

Billing + tokens.

AI core + parent letter.

Quiz builder.

Assessment center.

Chatbot.

Community hub.

Admin suite + translations.

QA + SEO + Launch.

🧠 19) AI Prompts

Parent Letter: “Generate a professional letter in {{language}}. Tone: {{tone}}. Input: {{student_context}}.”

Quiz Builder: “Create {{n}} questions on {{topic}} for level {{level}} in {{language}} with correct answers.”

Assessment Feedback: “Provide constructive feedback in {{language}} on these answers.”